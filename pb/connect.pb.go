// Code generated by protoc-gen-go.
// source: connect.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	connect.proto

It has these top-level messages:
	Request
	Reply
	ServiceRegRequest
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message containing the user's name.
type Request struct {
	// send to service id
	ServiceId uint32 `protobuf:"varint,1,opt,name=serviceId" json:"serviceId,omitempty"`
	Data      []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// The response message containing the greetings
type Reply struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Reply) Reset()                    { *m = Reply{} }
func (m *Reply) String() string            { return proto.CompactTextString(m) }
func (*Reply) ProtoMessage()               {}
func (*Reply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type ServiceRegRequest struct {
	ServiceId uint32 `protobuf:"varint,1,opt,name=serviceId" json:"serviceId,omitempty"`
}

func (m *ServiceRegRequest) Reset()                    { *m = ServiceRegRequest{} }
func (m *ServiceRegRequest) String() string            { return proto.CompactTextString(m) }
func (*ServiceRegRequest) ProtoMessage()               {}
func (*ServiceRegRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func init() {
	proto.RegisterType((*Request)(nil), "pb.Request")
	proto.RegisterType((*Reply)(nil), "pb.Reply")
	proto.RegisterType((*ServiceRegRequest)(nil), "pb.ServiceRegRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Connector service

type ConnectorClient interface {
	// Sends a greeting
	Accept(ctx context.Context, opts ...grpc.CallOption) (Connector_AcceptClient, error)
}

type connectorClient struct {
	cc *grpc.ClientConn
}

func NewConnectorClient(cc *grpc.ClientConn) ConnectorClient {
	return &connectorClient{cc}
}

func (c *connectorClient) Accept(ctx context.Context, opts ...grpc.CallOption) (Connector_AcceptClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Connector_serviceDesc.Streams[0], c.cc, "/pb.Connector/Accept", opts...)
	if err != nil {
		return nil, err
	}
	x := &connectorAcceptClient{stream}
	return x, nil
}

type Connector_AcceptClient interface {
	Send(*Request) error
	Recv() (*Reply, error)
	grpc.ClientStream
}

type connectorAcceptClient struct {
	grpc.ClientStream
}

func (x *connectorAcceptClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *connectorAcceptClient) Recv() (*Reply, error) {
	m := new(Reply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Connector service

type ConnectorServer interface {
	// Sends a greeting
	Accept(Connector_AcceptServer) error
}

func RegisterConnectorServer(s *grpc.Server, srv ConnectorServer) {
	s.RegisterService(&_Connector_serviceDesc, srv)
}

func _Connector_Accept_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ConnectorServer).Accept(&connectorAcceptServer{stream})
}

type Connector_AcceptServer interface {
	Send(*Reply) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type connectorAcceptServer struct {
	grpc.ServerStream
}

func (x *connectorAcceptServer) Send(m *Reply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *connectorAcceptServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Connector_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Connector",
	HandlerType: (*ConnectorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Accept",
			Handler:       _Connector_Accept_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("connect.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 207 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0xce, 0xcf, 0xcb,
	0x4b, 0x4d, 0x2e, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0xb2, 0xe6,
	0x62, 0x0f, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x92, 0xe1, 0xe2, 0x2c, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xf5, 0x4c, 0x91, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0d, 0x42, 0x08, 0x08, 0x09,
	0x71, 0xb1, 0xa4, 0x24, 0x96, 0x24, 0x4a, 0x30, 0x29, 0x30, 0x6a, 0xf0, 0x04, 0x81, 0xd9, 0x4a,
	0xd2, 0x5c, 0xac, 0x41, 0xa9, 0x05, 0x39, 0x95, 0x70, 0x49, 0x46, 0x24, 0x49, 0x43, 0x2e, 0xc1,
	0x60, 0x88, 0xee, 0xa0, 0xd4, 0x74, 0xa2, 0xec, 0x30, 0x32, 0xe6, 0xe2, 0x74, 0x86, 0xb8, 0x30,
	0xbf, 0x48, 0x48, 0x8d, 0x8b, 0xcd, 0x31, 0x39, 0x39, 0xb5, 0xa0, 0x44, 0x88, 0x5b, 0xaf, 0x20,
	0x49, 0x0f, 0x6a, 0x82, 0x14, 0x27, 0x84, 0x53, 0x90, 0x53, 0xa9, 0xc4, 0xa0, 0xc1, 0x68, 0xc0,
	0xe8, 0x64, 0xc0, 0x25, 0x9d, 0x99, 0xaf, 0x97, 0x5e, 0x54, 0x90, 0xac, 0x97, 0x5a, 0x91, 0x98,
	0x5b, 0x90, 0x93, 0x5a, 0xac, 0x97, 0x91, 0x9a, 0x93, 0x93, 0x5f, 0x9e, 0x5f, 0x94, 0x93, 0xe2,
	0xc4, 0xef, 0x01, 0x62, 0x87, 0x83, 0xd8, 0x01, 0x20, 0x5f, 0x07, 0x30, 0x26, 0xb1, 0x81, 0xbd,
	0x6f, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x9c, 0x82, 0x71, 0xd2, 0x0f, 0x01, 0x00, 0x00,
}
