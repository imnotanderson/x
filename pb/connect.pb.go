// Code generated by protoc-gen-go.
// source: connect.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	connect.proto

It has these top-level messages:
	Request
	Reply
	Frame
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Request struct {
	// send to service id
	ServiceId string `protobuf:"bytes,1,opt,name=serviceId" json:"serviceId,omitempty"`
	Data      []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Reply struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Reply) Reset()                    { *m = Reply{} }
func (m *Reply) String() string            { return proto.CompactTextString(m) }
func (*Reply) ProtoMessage()               {}
func (*Reply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Frame struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Frame) Reset()                    { *m = Frame{} }
func (m *Frame) String() string            { return proto.CompactTextString(m) }
func (*Frame) ProtoMessage()               {}
func (*Frame) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func init() {
	proto.RegisterType((*Request)(nil), "pb.Request")
	proto.RegisterType((*Reply)(nil), "pb.Reply")
	proto.RegisterType((*Frame)(nil), "pb.Frame")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Connector service

type ConnectorClient interface {
	Accept(ctx context.Context, opts ...grpc.CallOption) (Connector_AcceptClient, error)
}

type connectorClient struct {
	cc *grpc.ClientConn
}

func NewConnectorClient(cc *grpc.ClientConn) ConnectorClient {
	return &connectorClient{cc}
}

func (c *connectorClient) Accept(ctx context.Context, opts ...grpc.CallOption) (Connector_AcceptClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Connector_serviceDesc.Streams[0], c.cc, "/pb.Connector/Accept", opts...)
	if err != nil {
		return nil, err
	}
	x := &connectorAcceptClient{stream}
	return x, nil
}

type Connector_AcceptClient interface {
	Send(*Request) error
	Recv() (*Reply, error)
	grpc.ClientStream
}

type connectorAcceptClient struct {
	grpc.ClientStream
}

func (x *connectorAcceptClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *connectorAcceptClient) Recv() (*Reply, error) {
	m := new(Reply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Connector service

type ConnectorServer interface {
	Accept(Connector_AcceptServer) error
}

func RegisterConnectorServer(s *grpc.Server, srv ConnectorServer) {
	s.RegisterService(&_Connector_serviceDesc, srv)
}

func _Connector_Accept_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ConnectorServer).Accept(&connectorAcceptServer{stream})
}

type Connector_AcceptServer interface {
	Send(*Reply) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type connectorAcceptServer struct {
	grpc.ServerStream
}

func (x *connectorAcceptServer) Send(m *Reply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *connectorAcceptServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Connector_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Connector",
	HandlerType: (*ConnectorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Accept",
			Handler:       _Connector_Accept_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

// Client API for ClientConnector service

type ClientConnectorClient interface {
	Accept(ctx context.Context, opts ...grpc.CallOption) (ClientConnector_AcceptClient, error)
}

type clientConnectorClient struct {
	cc *grpc.ClientConn
}

func NewClientConnectorClient(cc *grpc.ClientConn) ClientConnectorClient {
	return &clientConnectorClient{cc}
}

func (c *clientConnectorClient) Accept(ctx context.Context, opts ...grpc.CallOption) (ClientConnector_AcceptClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ClientConnector_serviceDesc.Streams[0], c.cc, "/pb.ClientConnector/Accept", opts...)
	if err != nil {
		return nil, err
	}
	x := &clientConnectorAcceptClient{stream}
	return x, nil
}

type ClientConnector_AcceptClient interface {
	Send(*Frame) error
	Recv() (*Frame, error)
	grpc.ClientStream
}

type clientConnectorAcceptClient struct {
	grpc.ClientStream
}

func (x *clientConnectorAcceptClient) Send(m *Frame) error {
	return x.ClientStream.SendMsg(m)
}

func (x *clientConnectorAcceptClient) Recv() (*Frame, error) {
	m := new(Frame)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ClientConnector service

type ClientConnectorServer interface {
	Accept(ClientConnector_AcceptServer) error
}

func RegisterClientConnectorServer(s *grpc.Server, srv ClientConnectorServer) {
	s.RegisterService(&_ClientConnector_serviceDesc, srv)
}

func _ClientConnector_Accept_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ClientConnectorServer).Accept(&clientConnectorAcceptServer{stream})
}

type ClientConnector_AcceptServer interface {
	Send(*Frame) error
	Recv() (*Frame, error)
	grpc.ServerStream
}

type clientConnectorAcceptServer struct {
	grpc.ServerStream
}

func (x *clientConnectorAcceptServer) Send(m *Frame) error {
	return x.ServerStream.SendMsg(m)
}

func (x *clientConnectorAcceptServer) Recv() (*Frame, error) {
	m := new(Frame)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ClientConnector_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ClientConnector",
	HandlerType: (*ClientConnectorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Accept",
			Handler:       _ClientConnector_Accept_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("connect.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 227 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x90, 0x4f, 0x4b, 0xc4, 0x30,
	0x10, 0xc5, 0xcd, 0xa2, 0x2b, 0x19, 0x95, 0x85, 0x9c, 0x96, 0x5d, 0x0f, 0x4b, 0x11, 0xe9, 0x29,
	0x2c, 0xbb, 0x07, 0x0f, 0x9e, 0x6c, 0x41, 0xf4, 0x56, 0x72, 0xf1, 0x9c, 0xa6, 0x83, 0x16, 0xd2,
	0x66, 0x4c, 0xe3, 0x9f, 0x7e, 0x7b, 0x69, 0x2a, 0x2d, 0x82, 0xb7, 0xdf, 0xcc, 0x9b, 0xc7, 0x3c,
	0x1e, 0x5c, 0x19, 0xd7, 0xb6, 0x68, 0x82, 0x24, 0xef, 0x82, 0x13, 0x0b, 0x2a, 0x93, 0x7b, 0x38,
	0x57, 0xf8, 0xfe, 0x81, 0x5d, 0x10, 0xd7, 0xc0, 0x3b, 0xf4, 0x9f, 0xb5, 0xc1, 0xe7, 0x6a, 0xcd,
	0x76, 0x2c, 0xe5, 0x6a, 0x5e, 0x08, 0x01, 0xa7, 0x95, 0x0e, 0x7a, 0xbd, 0xd8, 0xb1, 0xf4, 0x52,
	0x45, 0x4e, 0xb6, 0x70, 0xa6, 0x90, 0x6c, 0x3f, 0x89, 0xec, 0xaf, 0xf8, 0xe8, 0x75, 0x83, 0xff,
	0x89, 0x87, 0x23, 0xf0, 0x7c, 0xcc, 0xe2, 0xbc, 0xb8, 0x85, 0xe5, 0x83, 0x31, 0x48, 0x41, 0x5c,
	0x48, 0x2a, 0xe5, 0x6f, 0x9e, 0x0d, 0x1f, 0x07, 0xb2, 0x7d, 0x72, 0x92, 0xb2, 0x3d, 0x3b, 0xdc,
	0xc1, 0x2a, 0xb7, 0x35, 0xb6, 0x61, 0xb6, 0xde, 0x4c, 0xd6, 0x78, 0x1d, 0x1f, 0x6e, 0x66, 0x1c,
	0x8d, 0xd9, 0x1e, 0xb6, 0xb5, 0x93, 0xaf, 0x9e, 0x8c, 0xc4, 0x6f, 0xdd, 0x90, 0xc5, 0x4e, 0xbe,
	0xa1, 0xb5, 0xee, 0xcb, 0x79, 0x5b, 0x65, 0xab, 0xa7, 0x81, 0x5f, 0x06, 0x2e, 0x86, 0x62, 0x0a,
	0x56, 0x2e, 0x63, 0x43, 0xc7, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x20, 0xb6, 0x6b, 0xa6, 0x32,
	0x01, 0x00, 0x00,
}
